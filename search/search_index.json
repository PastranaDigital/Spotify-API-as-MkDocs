{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#overview","title":"Overview","text":"<p>Retrieve metadata from Spotify content or control playback</p> <p>Spotify Web API enables the creation of applications that can interact with Spotify's streaming service, such as retrieving content metadata, creating and managing playlists, or controlling playback.</p> <p></p>"},{"location":"#getting-started","title":"Getting started","text":"<p>This is where the magic begins! The following steps will help you to get started with your journey towards creating some awesome music apps using the API:</p> <ol> <li>Log into the dashboard using your Spotify account.</li> <li>Create an app and select \"Web API\" for the question asking which APIs are you planning to use. Once you have created your app, you will have access to the app credentials. These will be required for API authorization to obtain an access token.</li> <li>Use the access token in your API requests.</li> </ol> <p>You can follow the Getting started tutorial to learn how to make your first Web API call.</p> <p></p>"},{"location":"#documentation","title":"Documentation","text":"<p>The documentation is organized as follows:</p> <ul> <li>Concepts that clarify key topics</li> <li>Tutorials, which serve as an introduction to important topics when using Web API</li> <li>How-Tos, step-by-step guides that cover practical tasks or use cases</li> <li>Reference, the API specification</li> </ul> <p></p>"},{"location":"#api-reference","title":"API reference","text":"<p>The Spotify Web API provides a wide range of functionality for developers, including:</p> <ul> <li>Retrieve data from your favourite artist, album or show.</li> <li>Search for Spotify content.</li> <li>Control and interact with the playback, play and resume, seek to a position or retrieve your queue.</li> <li>Manage your personal library, by creating a new playlist and adding your favourite tracks to it.     And much more! You can find a complete list of available endpoints in the API Reference.</li> </ul> <p></p>"},{"location":"#examples","title":"Examples","text":"<p>We've provided a step-by-step how-to that will guide you through the creation of a web app to display your Spotify profile data.</p> <p></p>"},{"location":"#support","title":"Support","text":"<p>If you have any questions or run into any issues while using the Spotify Web API, you can find help in the Spotify Developer Community. Here, you can connect and get help from other developers.</p> <p></p>"},{"location":"#legal","title":"Legal","text":"<p>By using Spotify Web API, you accept the Spotify Developer Terms of Service.</p>"},{"location":"Getting-started/","title":"Getting started with Web API","text":"<p>This tutorial will help you to make your first Web API call by retriving an artist's metadata. The steps to do so are the following:</p> <ol> <li>Create an app, if you haven't done so.</li> <li>Request an access token.</li> <li>Use the access token to request the artist data.</li> </ol> <p>Here we go, let's rock &amp; roll!</p> <p></p>"},{"location":"Getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>This tutorial assumes you have a Spotify account (free or premium).</li> <li>We will use cURL to make API calls. You can install it from here our using the package manager of your choice.</li> </ul>"},{"location":"Getting-started/#set-up-your-account","title":"Set Up Your Account","text":"<p>Login to the Spotify Developer Dashboard. If necessary, read the latest Developer Terms of Service to complete your account set up.</p> <p></p>"},{"location":"Getting-started/#create-an-app","title":"Create an app","text":"<p>An app provides the Client ID and Client Secret needed to request an access token by implementing any of the authorization flows.</p> <p>To create an app, go to your Dashboard, click on the Create an app button and enter the following information:</p> <ul> <li>App Name: My App</li> <li>App Description: This is my first Spotify app</li> <li>Redirect URI: You won't need this parameter in this example, so let's use <code>http://localhost:3000</code>.</li> </ul> <p>Finally, check the Developer Terms of Service checkbox and tap on the Create button.</p> <p></p>"},{"location":"Getting-started/#request-an-access-token","title":"Request an access token","text":"<p>The access token is a string which contains the credentials and permissions that can be used to access a given resource (e.g artists, albums or tracks) or user's data (e.g your profile or your playlists).</p> <p>In order to request the access token you need to get your Client_ID and Client Secret:</p> <ol> <li>Go to the Dashboard</li> <li>Click on the name of the app you have just created (My App)</li> <li>Click on the Settings button</li> </ol> <p>The Client ID can be found here. The Client Secret can be found behind the View client secret link.</p> <p>With our credentials in hand, we are ready to request an access token. This tutorial uses the Client Credentials, so we must:</p> <ul> <li>Send a POST request to the token endpoint URI.</li> <li>Add the Content-Type header set to the application/x-www-form-urlencoded value.</li> <li>Add a HTTP body containing the Client ID and Client Secret, along with the grant_type parameter set to client_credentials.</li> </ul> <pre><code>curl -X POST \"https://accounts.spotify.com/api/token\" \\\n     -H \"Content-Type: application/x-www-form-urlencoded\" \\\n     -d \"grant_type=client_credentials&amp;client_id=your-client-id&amp;client_secret=your-client-secret\"\n</code></pre> <p>The response will return an access token valid for 1 hour:</p> <pre><code>{\n    \"access_token\": \"BQDBKJ5eo5jxbtpWjVOj7ryS84khybFpP_lTqzV7uV-T_m0cTfwvdn5BnBSKPxKgEb11\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600\n}\n</code></pre> <p></p>"},{"location":"Getting-started/#request-artist-data","title":"Request artist data","text":"<p>For this example, we will use the Get Artist endpoint to request information about an artist. According to the API Reference, the endpoint needs the Spotify ID of the artist.</p> <p>An easy way to get the Spotify ID of an artist is using the Spotify Desktop App:</p> <ol> <li>Search the artist</li> <li>Click on the three dots icon from the artist profile</li> <li>Select Share &gt; Copy link to artist. The Spotify ID is the value that comes right after the <code>open.spotify.com/artist</code> URI.</li> </ol> <p>Our API call must include the access token we have just generated using the <code>Authorization</code> header as follows:</p> <pre><code>curl \"https://api.spotify.com/v1/artists/4Z8W4fKeB5YxbusRsdQVPb\" \\\n     -H \"Authorization: Bearer BQDBKJ5eo5jxbtpWjVOj7ryS84khybFpP_lTqzV7uV-T_m0cTfwvdn5BnBSKPxKgEb11\"\n</code></pre> <p>If everything goes well, the API will return the following JSON response:</p> <pre><code>{\n    \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/artist/4Z8W4fKeB5YxbusRsdQVPb\"\n    },\n    \"followers\": {\n        \"href\": null,\n        \"total\": 7625607\n    },\n    \"genres\": [\"alternative rock\", \"art rock\", \"melancholia\", \"oxford indie\", \"permanent wave\", \"rock\"],\n    \"href\": \"https://api.spotify.com/v1/artists/4Z8W4fKeB5YxbusRsdQVPb\",\n    \"id\": \"4Z8W4fKeB5YxbusRsdQVPb\",\n    \"images\": [\n        {\n            \"height\": 640,\n            \"url\": \"https://i.scdn.co/image/ab6761610000e5eba03696716c9ee605006047fd\",\n            \"width\": 640\n        },\n        {\n            \"height\": 320,\n            \"url\": \"https://i.scdn.co/image/ab67616100005174a03696716c9ee605006047fd\",\n            \"width\": 320\n        },\n        {\n            \"height\": 160,\n            \"url\": \"https://i.scdn.co/image/ab6761610000f178a03696716c9ee605006047fd\",\n            \"width\": 160\n        }\n    ],\n    \"name\": \"Radiohead\",\n    \"popularity\": 79,\n    \"type\": \"artist\",\n    \"uri\": \"spotify:artist:4Z8W4fKeB5YxbusRsdQVPb\"\n}\n</code></pre> <p>Congratulations! You made your first API call to the Spotify Web API.</p> <p></p>"},{"location":"Getting-started/#summary","title":"Summary","text":"<ul> <li> <p>The Spotify Web API provides different endpoints depending on the data we want to access. The API calls must include the <code>Authorization</code> header along with a valid access token.</p> </li> <li> <p>This tutorial makes use of the client credentials grant type to retrieve the access token. That works fine in scenarios where you control the API call to Spotify, for example where your backend is connecting to the Web API. It will not work in cases where your app will connect on behalf of a specific user, for example when getting private playlist or profile data.</p> </li> </ul> <p></p>"},{"location":"Getting-started/#whats-next","title":"What's next?","text":"<ul> <li> <p>The tutorial used the Spotify Desktop App to retrieve the Spotify ID of the artist. The ID can also be retrieved using the Search endpoint. An interesting exercise would be to extend the example with a new API call to the /search endpoint. Do you accept the challenge?</p> </li> <li> <p>The authorization guide provides detailed information about which authorization flow suits you best. Make sure you read it first!</p> </li> <li> <p>You can continue your journey by reading the API calls guide which describes in detail the Web API request and responses.</p> </li> <li> <p>Finally, if you are looking for a more practical documentation, you can follow the Display your Spotify Profile Data in a Web App how-to which implements a step-by-step web application using authorization code flow to request the access token.</p> </li> </ul>"},{"location":"concepts/API-calls/","title":"API calls","text":"<p>The Spotify Web API is a restful API with different endpoints which return JSON metadata about music artists, albums, and tracks, directly from the Spotify Data Catalogue.</p> <p></p>"},{"location":"concepts/API-calls/#base-url","title":"Base URL","text":"<p>The base address of Web API is <code>https://api.spotify.com</code>.</p> <p></p>"},{"location":"concepts/API-calls/#authorization","title":"Authorization","text":"<p>All requests to Spotify Web API require authorization. Make sure you have read the authorization guide to understand the basics.</p> <p>To access private data through the Web API, such as user profiles and playlists, an application must get the user\u2019s permission to access the data.</p> <p></p>"},{"location":"concepts/API-calls/#requests","title":"Requests","text":"<p>Data resources are accessed via standard HTTP requests in UTF-8 format to an API endpoint. The Web API uses the following HTTP verbs:</p> Method Action GET Retrieves resources POST Creates resources PUT Changes and/or replaces resources or collections DELETE Deletes resources <p></p>"},{"location":"concepts/API-calls/#responses","title":"Responses","text":"<p>Web API normally returns JSON in the response body. Some endpoints (e.g Change Playlist Details) don't return JSON but the HTTP status code</p> <p></p>"},{"location":"concepts/API-calls/#response-status-codes","title":"Response Status Codes","text":"<p>Web API uses the following response status codes, as defined in the RFC 2616 and RFC 6585:</p> Status Code Description 200 OK - The request has succeeded. The client can read the result of the request in the body and the headers of the response. 201 Created - The request has been fulfilled and resulted in a new resource being created. 202 Accepted - The request has been accepted for processing, but the processing has not been completed. 204 No Content - The request has succeeded but returns no message body. 304 Not Modified. See Conditional requests. 400 Bad Request - The request could not be understood by the server due to malformed syntax. The message body will contain more information; see Response Schema. 401 Unauthorized - The request requires user authentication or, if the request included authorization credentials, authorization has been refused for those credentials. 403 Forbidden - The server understood the request, but is refusing to fulfill it. 404 Not Found - The requested resource could not be found. This error can be due to a temporary or permanent condition. 429 Too Many Requests - Rate limiting has been applied. 500 Internal Server Error. You should never receive this error because our clever coders catch them all ... but if you are unlucky enough to get one, please report it to us through a comment at the bottom of this page. 502 Bad Gateway - The server was acting as a gateway or proxy and received an invalid response from the upstream server. 503 Service Unavailable - The server is currently unable to handle the request due to a temporary condition which will be alleviated after some delay. You can choose to resend the request again. <p></p>"},{"location":"concepts/API-calls/#response-error","title":"Response Error","text":"<p>Web API uses two different formats to describe an error:</p> <ul> <li>Authentication Error Object</li> <li>Regular Error Object</li> </ul> <p></p>"},{"location":"concepts/API-calls/#authentication-error-object","title":"Authentication Error Object","text":"<p>Whenever the application makes requests related to authentication or authorization to Web API, such as retrieving an access token or refreshing an access token, the error response follows RFC 6749 on the OAuth 2.0 Authorization Framework.</p> Key Value Type Value Description error string A high level description of the error as specified in RFC 6749 Section 5.2. error_description string A more detailed description of the error as specified in RFC 6749 Section 4.1.2.1. <p>Here is an example of a failing request to refresh an access token.</p> <pre><code>$ curl -H \"Authorization: Basic Yjc...cK\" -d grant_type=refresh_token -d refresh_token=AQD...f0 \"https://accounts.spotify.com/api/token\"\n\n{\n    \"error\": \"invalid_client\",\n    \"error_description\": \"Invalid client secret\"\n}\n</code></pre> <p></p>"},{"location":"concepts/API-calls/#regular-error-object","title":"Regular Error Object","text":"<p>Apart from the response code, unsuccessful responses return a JSON object containing the following information:</p> Key Value Type Value Description status integer The HTTP status code that is also returned in the response header. For further information, see Response Status Codes. message string A short description of the cause of the error. <p>Here, for example is the error that occurs when trying to fetch information for a non-existent track:</p> <pre><code>$ curl -i \"https://api.spotify.com/v1/tracks/2KrxsD86ARO5beq7Q0Drfqa\"\n\nHTTP/1.1 400 Bad Request\n{\n    \"error\": {\n        \"status\": 400,\n        \"message\": \"invalid id\"\n    }\n}\n</code></pre> <p></p>"},{"location":"concepts/API-calls/#conditional-requests","title":"Conditional Requests","text":"<p>Most API responses contain appropriate cache-control headers set to assist in client-side caching:</p> <ul> <li>If you have cached a response, do not request it again until the response has expired.</li> <li>If the response contains an ETag, set the If-None-Match request header to the ETag value.</li> <li>If the response has not changed, the Spotify service responds quickly with 304 Not Modified status, meaning that your cached version is still good and your application should use it.</li> </ul> <p></p>"},{"location":"concepts/API-calls/#timestamps","title":"Timestamps","text":"<p>Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: <code>YYYY-MM-DDTHH:MM:SSZ</code>. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, <code>release_date</code> in an Album Object.</p> <p></p>"},{"location":"concepts/API-calls/#pagination","title":"Pagination","text":"<p>Some endpoints support a way of paging the dataset, taking an offset and limit as query parameters:</p> <pre><code>$ curl\nhttps://api.spotify.com/v1/artists/1vCWHaC5f2uS3yhpwWbIA6/albums?album_type=SINGLE&amp;offset=20&amp;limit=10\n</code></pre> <p>In this example, in a list of 50 (<code>total</code>) singles by the specified artist : From the twentieth (<code>offset</code>) single, retrieve the next 10 (<code>limit</code>) singles.</p>"},{"location":"concepts/Access-Token/","title":"Access Token","text":"<p>The access token is a string which contains the credentials and permissions that can be used to access a given resource (e.g artists, albums or tracks) or user's data (e.g your profile or your playlists).</p> <p>To use the access token you must include the following header in your API calls:</p> Header Parameter Value Authorization Valid access token following the format: <code>Bearer &lt;Access Token&gt;</code> <p>Note that the access token is valid for 1 hour (3600 seconds). After that time, the token expires and you need to request a new one.</p> <p></p>"},{"location":"concepts/Access-Token/#examples","title":"Examples","text":"<p>The following example uses <code>cURL</code> to retrieve information about a track using the Get a track endpoint:</p> <pre><code>curl --request GET \\\n    'https://api.spotify.com/v1/tracks/2TpxZ7JUBn3uw46aR7qd6V' \\\n    --header \"Authorization: Bearer NgCXRK...MzYjw\"\n</code></pre> <p>The following code implements the <code>getProfile()</code> function which performs the API call to the Get Current User's Profile endpoint to retrieve the user profile related information:</p> <pre><code>async function getProfile(accessToken) {\n    let accessToken = localStorage.getItem('access_token');\n\n    const response = await fetch('https://api.spotify.com/v1/me', {\n        headers: {\n            Authorization: 'Bearer ' + accessToken,\n        },\n    });\n\n    const data = await response.json();\n}\n</code></pre>"},{"location":"concepts/Apps/","title":"Apps","text":"<p>The app provides, among others, the Client ID and Client Secret needed to implement any of the authorization flows.</p> <p>To do so, go to your Dashboard and click on the Create an App button to open the following dialog box:</p> <p></p> <p>Enter an App Name and App Description of your choice (they will be displayed to the user on the grant screen), put a tick in the Developer Terms of Service checkbox and finally click on CREATE. Your application is now registered, and you'll be redirected to the app overview page.</p> <p></p> <p>The app overview page provides access to different elements:</p> <ul> <li>App metrics, such as daily and monthly active users or number of users per country. Note that the metrics are initially empty.</li> <li>App Status. By default, your app will be in Development Mode with limits on the number of users who can install it, and the number of API requests it can make. Note that you can request an extension of this quota if needed by clicking on the Request Extension link.</li> <li>App settings.</li> <li>Client ID, the unique identifier of your app.</li> <li>Client Secret, the key you will use to authorize your Web API or SDK calls.</li> </ul> <p>Info</p> <p>Always store the client secret key securely; never reveal it publicly! If you suspect that the secret key has been compromised, regenerate it immediately by clicking the ROTATE button on the app overview page.</p> <p>It is time to configure our app. Click on Edit Settings to view and update your app settings. The following dialog will show up:</p> <p></p> <ul> <li> <p>Add a web domain or URL to the Website field. This will help users to obtain more information about your application.</p> </li> <li> <p>In Redirect URIs enter one or more addresses that you want to allowlist with Spotify. This URI enables the Spotify authentication service to automatically invoke your app every time the user logs in (e.g. http://localhost:8080)     Note that on iOS apps, the redirect URI must follow these rules:</p> <ul> <li>All the characters are lowercase.</li> <li>The prefix must be unique to your application (It cannot be a general prefix like http).</li> <li>The prefix must only be used by your application for authenticating Spotify. If you already have a URL scheme handled by your application for other uses, do not reuse it.</li> <li>Include a path after the first pair of forward slashes.</li> </ul> <p>For example: If your app name is My Awesome App, a good candidate for the redirect URI could be <code>my-awesome-app-login://callback</code>.</p> </li> <li> <p>If you are developing an Android or iOS app, fill out the Android Package or Bundle IDs respectively.</p> </li> </ul> <p>Once you have finished updating the app settings, click on SAVE.</p> <p>Finally, you can delete your app by clicking on the DELETE red button.</p>"},{"location":"concepts/Authorization/","title":"Authorization","text":"<p>Authorization refers to the process of granting a user or application access permissions to Spotify data and features (e.g your application needs permission from a user to access their playlists).</p> <p>Spotify implements the OAuth 2.0 authorization framework:</p> <p></p> <p>Where:</p> <ul> <li>End User corresponds to the Spotify user. The End User grants access to the protected resources (e.g. playlists, personal information, etc.)</li> <li>My App is the client that requests access to the protected resources (e.g. a mobile or web app).</li> <li>Server hosts the protected resources and provides authentication and authorization via OAuth 2.0.</li> </ul> <p>The access to the protected resources is determined by one or several scopes. Scopes enable your application to access specific functionality (e.g. read a playlist, modify your library or just streaming) on behalf of a user. The set of scopes you set during the authorization, determines the access permissions that the user is asked to grant. You can find detailed information about scopes in the scopes documentation.</p> <p>The authorization process requires valid client credentials: a client ID and a client secret. You can follow the Apps guide to learn how to generate them.</p> <p>Once the authorization is granted, the authorization server issues an access token, which is used to make API calls on behalf the user or application.</p> <p>The OAuth2 standard defines four grant types (or flows) to request and get an access token. Spotify implements the following ones:</p> <ul> <li>Authorization code</li> <li>Authorization code with PKCE extension</li> <li>Client credentials</li> <li>Implicit grant</li> </ul> <p></p>"},{"location":"concepts/Authorization/#which-oauth-flow-should-i-use","title":"Which OAuth flow should I use?","text":"<p>Choosing one flow over the rest depends on the application you are building:</p> <ul> <li>If you are developing a long-running application (e.g. web app running on the server) in which the user grants permission only once, and the client secret can be safely stored, then the authorization code flow is the recommended choice.</li> <li>In scenarios where storing the client secret is not safe (e.g. desktop, mobile apps or JavaScript web apps running in the browser), you can use the authorization code with PKCE, as it provides protection against attacks where the authorization code may be intercepted.</li> <li>For some applications running on the backend, such as CLIs or daemons, the system authenticates and authorizes the app rather than a user. For these scenarios, Client credentials is the typical choice. This flow does not include user authorization, so only endpoints that do not request user information (e.g. user profile data) can be accessed.</li> <li>The implicit grant has some important downsides: it returns the token in the URL instead of a trusted channel, and does not support refresh token. Thus, we don't recommend using this flow.</li> </ul> <p>The following table summarizes the flows' behaviors:</p> Flow Access User Resources Requires Secret Key (Server-Side) Access Token Refresh Authorization code Yes Yes Yes Authorization code with PKCE Yes No Yes Client credentials No Yes No Implicit grant Yes No No"},{"location":"concepts/Playlists/","title":"Playlists","text":"<p>Playlists are containers for tracks and episodes. Spotify\u2019s users have already created over 1.5 billion of them. By creating a playlist, a Spotify user can specify a subset of tracks and episodes; and the order in which to play them.</p> <p>Through context menus and through support for drag-and-drop actions, the Spotify music players provide users with various controls for manually working with playlists. Playlists can be shared with, and followed by, other users, and they can be made available offline and used to seed other Spotify services, like radio.</p> <p></p> <p></p>"},{"location":"concepts/Playlists/#public-private-and-collaborative-status","title":"Public, Private, and Collaborative Status","text":"<p>When creating or updating a playlist through the Spotify Web API, setting the attribute \u201cpublic\u201d to true will publish the playlist on the user\u2019s profile, which means it will appear under \u201cpublic playlists\u201d. This will also make the playlist visible in search results.</p> <p>A playlist created through the WebAPI will have the \u201cpublic\u201d attribute set to true by default and setting it to false does the opposite, it won\u2019t be displayed on the user\u2019s profile and won\u2019t be visible through search results</p> <p>Requests to these endpoints require different scopes depending on the status of this attribute, <code>playlist-modify-public</code> is required when setting it to true and <code>playlist-modify-private</code> when setting it to false. When creating a new playlist, the default value of the public attribute is true, which means unless this attribute is explicitly set to false, creating a playlist requires the <code>playlist-modify-public</code> scope.</p> <p>Note that the public attribute does not refer to access control, modifying access is currently not possible through the WebAPI, so anyone with the link to the playlist can access it unless it\u2019s made private through for instance the desktop client.</p> <p>A playlist can also be made collaborative through the WebAPI, by setting the \u201ccollaborative\u201d attribute to true. This means that anyone with the link can add to or remove a track from it. When creating a new playlist, the default value of the collaborative attribute is false</p> <p>Note that this is slightly different from adding/removing collaborators, which is currently not possible through the WebAPI. You can read more about adding/removing collaborators here.</p> <p>Furthermore, a playlist cannot have both the \u201ccollaborative\u201d attribute and the \u201cpublic\u201d attribute set to true at the same time, so in order to set one of them to true the other must be set to false. Basically, a playlist cannot be both collaborative and published at the same time.</p> <p></p>"},{"location":"concepts/Playlists/#reading-a-playlist","title":"Reading a Playlist","text":"<p>To read a playlist, we first need to find it, and for that we need its Spotify ID. The Get a List of a User\u2019s Playlists gives us an easy way to get basic details about a user\u2019s playlists, including their IDs. This is, the playlists the user owns and the playlists the user is following, excluding collaborative playlists owned by other users. The set of playlists will be determined by the scopes granted to the application:</p> <ul> <li>Owned and followed non-collaborative public playlists will be returned</li> <li>Owned and followed non-collaborative private playlists will only be returned when the scope <code>playlist-read-private</code> has been granted</li> <li>Owned and followed collaborative playlists will only be returned when the scope <code>playlist-read-collaborative</code> has been granted</li> </ul> <p>Once we have a list of playlists we can retrieve the details of a specific playlist using the Web API\u2019s Get a Playlist endpoint, and a list of its items using Get a Playlist\u2019s Items. This last endpoint returns, in addition to an array of track and episode objects (depending on the <code>additional_types</code> parameter), information about who added the item and when it was added. (The items themselves are wrapped in a paging object to make it easy to retrieve very large playlists when necessary.)</p> <p></p>"},{"location":"concepts/Playlists/#local-files","title":"Local Files","text":"<p>Spotify allows you to play your own collection of music files from within the Spotify client. These tracks appear alongside the music available on Spotify and can be included in users\u2019 playlists, even if that particular track is not available on Spotify itself. For more information on local files, please read our support article.</p> <p>The Web API can retrieve the contents of playlists, including information on any local files that have been added, via the Playlist endpoints.</p> <p></p>"},{"location":"concepts/Playlists/#identifying-local-files","title":"Identifying Local Files","text":"<p>Requesting the contents of a playlist returns a set of track objects along with extra information about that track\u2019s instance in the playlist. For example:</p> <pre><code>{\n    \"added_at\": \"2015-01-25T07:51:45Z\",\n    \"added_by\": {\n        \"external_urls\": {\n        \"spotify\": \"http://open.spotify.com/user/exampleuser\"\n    },\n    \"href\": \"https://api.spotify.com/v1/users/exampleuser\",\n    \"id\": \"exampleuser\",\n    \"type\": \"user\",\n    \"uri\": \"spotify:user:exampleuser\"\n},\n\"is_local\": true,\n\"track\": {\n    [Spotify Track Object]\n}\n</code></pre> <p>The key part here is the new property \"<code>is_local</code>\" which should be used to determine whether the track is a local file.</p> <p></p>"},{"location":"concepts/Playlists/#the-track-object-for-a-local-file","title":"The Track Object for a Local File","text":"<p>The structure of a Spotify track object for a local file is identical to that of a regular Spotify track, with some notable differences in available data:</p> <ul> <li>A number of fields will always be empty, zero, false or null</li> <li>Some fields are populated from available local file information</li> <li>The track URI has a special formatting</li> </ul> <pre><code>\"track\": {\n    \"album\": {\n        \"album_type\": null,\n        \"available_markets\": [],\n        \"external_urls\": {},\n        \"href\": null,\n        \"id\": null,\n        \"images\": [],\n        \"name\": \"Donkey Kong Country: Tropical Freeze\",\n        \"type\": \"album\",\n        \"uri\": null\n    },\n    \"artists\": [\n        {\n            \"external_urls\": {},\n            \"href\": null,\n            \"id\": null,\n            \"name\": \"David Wise\",\n            \"type\": \"artist\",\n            \"uri\": null\n        }\n    ],\n    \"available_markets\": [],\n    \"disc_number\": 0,\n    \"duration_ms\": 127000,\n    \"explicit\": false,\n    \"external_ids\": {},\n    \"external_urls\": {},\n    \"href\": null,\n    \"id\": null,\n    \"name\": \"Snomads Island\",\n    \"popularity\": 0,\n    \"preview_url\": null,\n    \"track_number\": 0,\n    \"type\": \"track\",\n    \"uri\": \"spotify:local:David+Wise:Donkey+Kong+Country%3A+Tropical+Freeze:Snomads+Island:127\"\n }\n}\n</code></pre> <p>The local file information is read by the client software when the file was added to the playlist.</p> <p>Although as much information as possible is taken from the local file, some may be missing so this information is not guaranteed to exist for all local files.</p> <p></p>"},{"location":"concepts/Playlists/#understanding-the-local-file-uri","title":"Understanding the Local File URI","text":"<p>The local file URI is constructed from information extracted from the local file when it was added to the playlist as follows:</p> <p><code>spotify:local:{artist}:{album_title}:{track_title}:{duration_in_seconds}</code></p> <p>All available information is also used to populate the object album name, artist name, track name and track duration properties, so parsing this directly should not be necessary.</p> <p></p>"},{"location":"concepts/Playlists/#how-should-i-render-local-files-to-the-user","title":"How Should I Render Local Files to the User?","text":"<p>Whether you display these files to your app\u2019s users is entirely dependent on the functionality that you require in your app. Initially, you could \u201cgrey out\u201d the tracks or hide them altogether.</p> <p>If you have access to the filesystem, you could use the information to match the track to the file and replicate the Spotify clients\u2019 behaviour. Or perhaps use the title and artist information to perform a search in the Spotify catalogue.</p> <p></p>"},{"location":"concepts/Playlists/#limitations","title":"Limitations","text":"<p>It is not currently possible to add local files to playlists using the Web API, but they can be Reordered or Removed. The latter should be done by specifying the <code>index</code> and <code>snapshot_id</code>, and NOT the URI of the track.</p> <p></p>"},{"location":"concepts/Playlists/#folders","title":"Folders","text":"<p>Folders are not returned through the Web API, nor can be created using it.</p> <p></p>"},{"location":"concepts/Playlists/#version-control-and-snapshots","title":"Version Control and Snapshots","text":"<p>The Web API provides several endpoints that allow playlists to be modified. These include Add Items to a Playlist, Remove Items from a Playlist, Replace a Playlist\u2019s Items and Reorder a Playlist\u2019s Items.</p> <p>Every change to a playlist is saved in its version history. This makes possible features such as offline availability and collaborative editing, and restoring an accidentally removed playlist. Every time you add, remove, or move a track, your modification is applied on top of all previous modifications, causing the playlist to enter a new state known as a snapshot.</p> <p></p> <p>If you need it, the Spotify Web API allows you to leverage snapshots to handle concurrent changes. Web API playlist endpoints like Create a Playlist and Get a Playlist, return a snapshot_id in the response body. This can be used later to identify the specific playlist version to target for changes when, for example, Removing Items from a Playlist. Concurrent changes are then automatically merged into the latest playlist version.</p> <p></p>"},{"location":"concepts/Playlists/#following-and-unfollowing-a-playlist","title":"Following and Unfollowing a Playlist","text":"<p>Playlists can be followed or unfollowed programmatically through the Follow a Playlist and Unfollow a Playlist endpoints. Any playlist can be followed \u2014 public, private, and collaborative \u2014 provided you know the owner\u2019s and the playlist\u2019s Spotify IDs. When a user follows a playlist, the playlist\u2019s owner will receive a notification in their Spotify client. When a track is added to a playlist, its followers will receive a notification in their Spotify client.</p> <p>We have no endpoint for deleting a playlist in the Web API; the notion of deleting a playlist is not relevant within the Spotify\u2019s playlist system. Even if you are the playlist\u2019s owner and you choose to manually remove it from your own list of playlists, you are simply unfollowing it. Although this behavior may sound strange, it means that other users who are already following the playlist can keep enjoying it. Manually restoring a deleted playlist through the Spotify Accounts Service is the same thing as following one of your own playlists that you have previously unfollowed.</p> <p></p>"},{"location":"concepts/Playlists/#using-playlist-images","title":"Using Playlist Images","text":"<p>Every playlist has an associated set of images which can be retrieved through Web API endpoints like Get a Playlist. In most cases there will be one image in a variety of sizes and the image will be a mosaic created from the album covers for the first few tracks:</p> <p></p> <p>The images array that\u2019s returned can vary depending on how many tracks are in the playlist, and if the playlist has been manually \u201cannotated\u201d. The images array can contain:</p> <ul> <li>Nothing, if the playlist has no tracks and is empty,</li> <li>An album cover of size 640\u00d7640, if the playlist contains 1 to 3 tracks or has tracks from less than 4 different albums,</li> <li>Three mosaic images of size 640\u00d7640, 300\u00d7300, and 60\u00d760, if the playlist contains tracks from 4 or more albums,</li> <li>A single custom image (example) in various sizes, if the playlist image has been set manually \u2014 for example, for some curated playlists.</li> </ul> <p>The JSON returned by the Web API endpoints includes both the image dimensions (largest first) and a temporary link to the images:</p> <pre><code>...\n\n\"images\" : [ {\n\"height\" : 640,\n\"url\" : \"https://mosaic.scdn.co/640/e337f3661f68bc4d96a554de0ad7988d65edb25a134cd5ccaef9d411eba33df9542db9ba731aaf98ec04f9acee17a7576f939eb5aa317d20c6322494c4b4399d9b7c6f61b6a6ee70c616bc1a985c7ab8\",\n\"width\" : 640\n}, {\n\"height\" : 300,\n\"url\" : \"https://mosaic.scdn.co/300/e337f3661f68bc4d96a554de0ad7988d65edb25a134cd5ccaef9d411eba33df9542db9ba731aaf98ec04f9acee17a7576f939eb5aa317d20c6322494c4b4399d9b7c6f61b6a6ee70c616bc1a985c7ab8\",\n\"width\" : 300\n}, {\n\"height\" : 60,\n\"url\" : \"https://mosaic.scdn.co/60/e337f3661f68bc4d96a554de0ad7988d65edb25a134cd5ccaef9d411eba33df9542db9ba731aaf98ec04f9acee17a7576f939eb5aa317d20c6322494c4b4399d9b7c6f61b6a6ee70c616bc1a985c7ab8\",\n\"width\" : 60\n} ],\n\n...\n</code></pre> <p>Info</p> <p>Be aware that the links will expire in less than one day.</p> <p>The use of album artwork in your applications is covered by our Developer Terms of Service. In particular you should be aware that:</p> <ul> <li>You must display the album artwork in the form that we provide it (although you can resize it),</li> <li>You should not store album artwork except when it is strictly necessary to operate your application, and</li> <li>You must provide a link close to the cover art back to the full length track on Spotify. We provide design resources to help you with this.</li> </ul>"},{"location":"concepts/Quota-modes/","title":"Quota modes","text":"<p>The quota mode refers to the mode in which an app can be: development mode or extended quota mode.</p> <p>You can check the current mode of your app by checking the App Status value in the App Settings:</p> <p></p> <p></p>"},{"location":"concepts/Quota-modes/#development-mode","title":"Development mode","text":"<p>Newly-created apps begin in development mode. This mode is perfect for apps that are under construction and apps that have been built for accessing or managing data in a single Spotify account.</p> <p>Up to 25 authenticated Spotify users can use an app that is in development mode \u2014 so you can share your app with beta testers, friends, or with fellow developers who are working on the app. Each Spotify user who installs your app will need to be added to your app's allowlist before they can use it.</p> <p></p>"},{"location":"concepts/Quota-modes/#adding-a-user-to-your-apps-allowlist","title":"Adding a user to your app's allowlist","text":"<p>Allow another user to use your development mode app by following these steps:</p> <ol> <li>Log in to the Developer Dashboard</li> <li>Tap on the name of your app</li> <li>Tap on the Settings button</li> <li>Tap on the Users Management tab    </li> <li>Tap on the Add new user button and enter the name and Spotify email address of the user that you want to enable to use your app</li> <li>Invite the new user to install and use your app</li> </ol> <p>Users may be able to log into a development mode app without having been allowlisted by the developer. However, API requests with an access token associated to that user and app will receive a 403 status code error</p> <p></p>"},{"location":"concepts/Quota-modes/#extended-quota-mode","title":"Extended quota mode","text":"<p>Extended quota mode is for Spotify apps that are ready for a wider audience. Apps in this category can be installed by an unlimited number of users and the allowlist in development mode no longer applies. Extended quota mode apps also have access to a higher rate limit than development mode apps do.</p>"},{"location":"concepts/Quota-modes/#moving-from-development-mode-into-extended-quota-mode","title":"Moving from development mode into extended quota mode","text":"<p>You can ask Spotify to move your app from development mode into extended quota mode. Spotify's app review team will take a look at your app and evaluate it for compliance with our Developer Policy.</p> <ol> <li>Log in to the Developer Dashboard</li> <li>Tap on the name of your app</li> <li>Tap on the Settings button</li> <li>Tap on the Quota extension Request tab    </li> <li>Tell us about your app by filling out the provided questionnaire (4 steps)</li> <li>Tap Submit</li> </ol> <p>When you have successfully submitted your app for review you should see the word 'Sent' in blue on your app detail page. The app review team will review the information that you have provided, test out your app and send you feedback by email, to the email address associated with your Spotify account. This review process can take up to six weeks.</p>"},{"location":"concepts/Rate-limits/","title":"Rate Limits","text":"<p>If your app makes a lot of Web API requests in a short period of time then it may receive a 429 error response from Spotify. This indicates that your app has reached our Web API rate limit. The Web API has rate limits in order to keep our API reliable and to help third-party developers use the API in a responsible way.</p> <p></p>"},{"location":"concepts/Rate-limits/#spotifys-rate-limit","title":"Spotify's rate limit","text":"<p>Spotify's API rate limit is calculated based on the number of calls that your app makes to Spotify in a rolling 30 second window. If your app exceeds the rate limit for your app then you'll begin to see 429 error responses from Spotify's Web API, and you may hear from users about unexpected behavior that they have noticed while using your app. The limit varies depending on whether your app is in development mode or extended quota mode.</p> <p></p> <p>In the chart above, the app will receive an error response for the periods of time where the 30 second window exceeds the example rate limit in red.</p> <p></p>"},{"location":"concepts/Rate-limits/#exceptions","title":"Exceptions","text":"<p>Be aware that Spotify does sometimes implement other limits outside of the API-wide rate limit. A few API endpoints, like the playlist image upload endpoint, have a custom rate limit that may differ from your app-wide rate limit. See the body of your API response from Spotify for more information about the error that you have received.</p> <p></p>"},{"location":"concepts/Rate-limits/#building-your-app-with-rate-limits-in-mind","title":"Building your app with rate limits in mind","text":"<p>Every app is different and you'll want to plan your app architecture and user experience with rate limits in mind. Here are a few techniques that can help you design an app that works well with Spotify's Web API rate limits:</p> <p></p>"},{"location":"concepts/Rate-limits/#apply-for-extended-quota-mode","title":"Apply for extended quota mode","text":"<p>If your app is meant to be used by many Spotify users at the same time then you should apply for extended quota mode. Apps in this mode have a rate limit that is much higher than apps in development mode, the default mode for new apps. You can apply for a quota extension by opening your app detail page in the Developer Dashboard and tapping on the Request Extension link.</p> <p></p>"},{"location":"concepts/Rate-limits/#develop-a-backoff-retry-strategy","title":"Develop a backoff-retry strategy","text":"<p>When your app has been rate limited it will receive a 429 error response from Spotify. Your app can use this information as a cue to slow down the number of API requests that it makes to the Web API. The header of the 429 response will normally include a <code>Retry-After</code> header with a value in seconds. Consider waiting for the number of seconds specified in <code>Retry-After</code> before your app calls the Web API again.</p> <p></p>"},{"location":"concepts/Rate-limits/#use-batch-apis-to-your-advantage","title":"Use batch APIs to your advantage","text":"<p>Spotify has some APIs \u2014 like the Get Multiple Albums endpoint \u2014 that allow you to fetch a batch of data in one API request. You can reduce your API requests by calling the batch APIs when you know that you will need data from a set of objects.</p> <p></p>"},{"location":"concepts/Rate-limits/#use-the-snapshot_id","title":"Use the snapshot_id","text":"<p>Playlist APIs expose a <code>snapshot_id</code> that corresponds to the version of the playlist that you are working with. Downloading a playlist can be expensive so some apps may want to store and refer to the <code>snapshot_id</code> to avoid refreshing an entire playlist that has not changed. You can learn more about <code>snapshot_id</code> in our Working with Playlists guide.</p> <p></p>"},{"location":"concepts/Rate-limits/#study-your-apps-request-patterns","title":"Study your app's request patterns","text":"<p>When you load your app's detail page in the Developer Dashboard you'll find a graph that can tell you about your API request volume over time. Understanding anomalies in API requests \u2014 and the reasons for them \u2014 can help you find ways to avoid hitting the rate limit. For example, if you notice that your website receives a surge in traffic after you send out your weekly newsletter then you might decide that you want to stagger the delivery of those emails over the course of a day.</p> <p>For more advanced insights into your app's request patterns, consider tracking your app's API calls to Spotify using your own logging tools.</p> <p></p>"},{"location":"concepts/Rate-limits/#consider-lazy-loading-features","title":"Consider 'lazy loading' features","text":"<p>Users often don't want to use every feature that is available to them on a web page, or in the view of a mobile app. You can avoid making API requests by making API calls conditional on user interactions, like tapping on a 'learn more' link, or scrolling to a defined region of a web page.</p>"},{"location":"concepts/Scopes/","title":"Scopes","text":"<p>Scopes provide Spotify users using third-party apps the confidence that only the information they choose to share will be shared, and nothing more.</p> <p></p>"},{"location":"concepts/Scopes/#pre-requisites","title":"Pre-requisites","text":"<p>Scopes are needed when implementing some of the authorization grant types. Make sure you have read the Authorization guide to understand the basics.</p> <p></p>"},{"location":"concepts/Scopes/#list-of-scopes","title":"List of Scopes","text":"<ul> <li>Images<ul> <li>ugc-image-upload</li> </ul> </li> <li>Spotify Connect<ul> <li>user-read-playback-state</li> <li>user-modify-playback-state</li> <li>user-read-currently-playing</li> </ul> </li> <li>Playback<ul> <li>app-remote-control</li> <li>streaming</li> </ul> </li> <li>Playlists<ul> <li>playlist-read-private</li> <li>playlist-read-collaborative</li> <li>playlist-modify-private</li> <li>playlist-modify-public</li> </ul> </li> <li>Follow<ul> <li>user-follow-modify</li> <li>user-follow-read</li> </ul> </li> <li>Listening History<ul> <li>user-read-playback-position</li> <li>user-top-read</li> <li>user-read-recently-played</li> </ul> </li> <li>Library<ul> <li>user-library-modify</li> <li>user-library-read</li> </ul> </li> <li>Users<ul> <li>user-read-email</li> <li>user-read-private</li> </ul> </li> <li>Open Access<ul> <li>user-soa-link</li> <li>user-soa-unlink</li> <li>soa-manage-entitlements</li> <li>soa-manage-partner</li> <li>soa-create-partner</li> </ul> </li> </ul>"},{"location":"concepts/Scopes/#ugc-image-upload","title":"<code>ugc-image-upload</code>","text":"Description Write access to user-provided images. Visible to users Upload images to Spotify on your behalf. <p>Endpoints that require the <code>ugc-image-upload</code> scope</p> <ul> <li>Add Custom Playlist Cover Image</li> </ul>"},{"location":"concepts/Scopes/#user-read-playback-state","title":"<code>user-read-playback-state</code>","text":"Description Read access to a user\u2019s player state. Visible to users Read your currently playing content and Spotify Connect devices information. <p>Endpoints that require the <code>user-read-playback-state</code> scope</p> <ul> <li>Get a User's Available Devices</li> <li>Get Information About The User's Current Playback</li> <li>Get the User's Currently Playing Track</li> </ul>"},{"location":"concepts/Scopes/#user-modify-playback-state","title":"<code>user-modify-playback-state</code>","text":"Description Write access to a user\u2019s playback state Visible to users Control playback on your Spotify clients and Spotify Connect devices. <p>Endpoints that require the <code>user-modify-playback-state</code> scope</p> <ul> <li>Pause a User's Playback</li> <li>Seek To Position In Currently Playing Track</li> <li>Set Repeat Mode On User\u2019s Playback</li> <li>Set Volume For User's Playback</li> <li>Skip User\u2019s Playback To Next Track</li> <li>Skip User\u2019s Playback To Previous Track</li> <li>Start/Resume a User's Playback</li> <li>Toggle Shuffle For User\u2019s Playback</li> <li>Transfer a User's Playback</li> <li>Add An Item To The End Of User's Current Playback Queue</li> </ul>"},{"location":"concepts/Scopes/#user-read-currently-playing","title":"<code>user-read-currently-playing</code>","text":"Description Read access to a user\u2019s currently playing content. Visible to users Read your currently playing content. <p>Endpoints that require the <code>user-read-currently-playing</code> scope</p> <ul> <li>Get the User's Currently Playing Track</li> <li>Get the User's Queue</li> </ul>"},{"location":"concepts/Scopes/#app-remote-control","title":"<code>app-remote-control</code>","text":"Description Remote control playback of Spotify. This scope is currently available to Spotify iOS and Android SDKs. Visible to users Communicate with the Spotify app on your device. <p>Endpoints that require the <code>app-remote-control</code> scope</p> <ul> <li>iOS SDK</li> <li>Android SDK</li> </ul>"},{"location":"concepts/Scopes/#streaming","title":"<code>streaming</code>","text":"Description Control playback of a Spotify track. This scope is currently available to the Web Playback SDK. The user must have a Spotify Premium account. Visible to users Play content and control playback on your other devices. <p>Endpoints that require the <code>streaming</code> scope</p> <ul> <li>Web Playback SDK</li> </ul>"},{"location":"concepts/Scopes/#playlist-read-private","title":"<code>playlist-read-private</code>","text":"Description Read access to user's private playlists. Visible to users Access your private playlists. <p>Endpoints that require the <code>playlist-read-private</code> scope</p> <ul> <li>Check if Users Follow a Playlist</li> <li>Get a List of Current User's Playlists</li> <li>Get a List of a User's Playlists</li> </ul>"},{"location":"concepts/Scopes/#playlist-read-collaborative","title":"<code>playlist-read-collaborative</code>","text":"Description Include collaborative playlists when requesting a user's playlists. Visible to users Access your collaborative playlists. <p>Endpoints that require the <code>playlist-read-collaborative</code> scope</p> <ul> <li>Get a List of Current User's Playlists</li> <li>Get a List of a User's Playlists</li> </ul>"},{"location":"concepts/Scopes/#playlist-modify-private","title":"<code>playlist-modify-private</code>","text":"Description Write access to a user's private playlists. Visible to users Manage your private playlists. <p>Endpoints that require the <code>playlist-modify-private</code> scope</p> <ul> <li>Follow a Playlist</li> <li>Unfollow a Playlist</li> <li>Add Items to a Playlist</li> <li>Change a Playlist's Details</li> <li>Create a Playlist</li> <li>Remove Items from a Playlist</li> <li>Reorder a Playlist's Items</li> <li>Replace a Playlist's Items</li> <li>Upload a Custom Playlist Cover Image</li> </ul>"},{"location":"concepts/Scopes/#playlist-modify-public","title":"<code>playlist-modify-public</code>","text":"Description Write access to a user's public playlists. Visible to users Manage your public playlists. <p>Endpoints that require the <code>playlist-modify-public</code> scope</p> <ul> <li>Follow a Playlist</li> <li>Unfollow a Playlist</li> <li>Add Items to a Playlist</li> <li>Change a Playlist's Details</li> <li>Create a Playlist</li> <li>Remove Items from a Playlist</li> <li>Reorder a Playlist's Items</li> <li>Replace a Playlist's Items</li> <li>Upload a Custom Playlist Cover Image</li> </ul>"},{"location":"concepts/Scopes/#user-follow-modify","title":"<code>user-follow-modify</code>","text":"Description Write/delete access to the list of artists and other users that the user follows. Visible to users Manage who you are following. <p>Endpoints that require the <code>user-follow-modify</code> scope</p> <ul> <li>Follow Artists or Users</li> <li>Unfollow Artists or Users</li> </ul>"},{"location":"concepts/Scopes/#user-follow-read","title":"<code>user-follow-read</code>","text":"Description Read access to the list of artists and other users that the user follows. Visible to users Access your followers and who you are following. <p>Endpoints that require the <code>user-follow-read</code> scope</p> <ul> <li>Check if Current User Follows Artists or Users</li> <li>Get User's Followed Artists</li> </ul>"},{"location":"concepts/Scopes/#user-read-playback-position","title":"<code>user-read-playback-position</code>","text":"Description Read access to a user\u2019s playback position in a content. Visible to users Read your position in content you have played. <p>Endpoints that require the <code>user-read-playback-position</code> scope</p> <ul> <li>Get an Episodes</li> <li>Get Several Episodes</li> <li>Get a Show</li> <li>Get Several Shows</li> <li>Get a Show's Episodes</li> </ul>"},{"location":"concepts/Scopes/#user-top-read","title":"<code>user-top-read</code>","text":"Description Read access to a user's top artists and tracks. Visible to users Read your top artists and content. <p>Endpoints that require the <code>user-top-read</code> scope</p> <ul> <li>Get a User's Top Artists and Tracks</li> </ul>"},{"location":"concepts/Scopes/#user-read-recently-played","title":"<code>user-read-recently-played</code>","text":"Description Read access to a user\u2019s recently played tracks. Visible to users Access your recently played items. <p>Endpoints that require the <code>user-read-recently-played</code> scope</p> <ul> <li>Get Current User's Recently Played Tracks</li> </ul>"},{"location":"concepts/Scopes/#user-library-modify","title":"<code>user-library-modify</code>","text":"Description Write/delete access to a user's \"Your Music\" library. Visible to users Manage your saved content. <p>Endpoints that require the <code>user-library-modify</code> scope</p> <ul> <li>Remove Albums for Current User</li> <li>Remove User's Saved Tracks</li> <li>Remove User's Saved Episodes</li> <li>Save Albums for Current User</li> <li>Save Tracks for User</li> <li>Save Episodes for User</li> </ul>"},{"location":"concepts/Scopes/#user-library-read","title":"<code>user-library-read</code>","text":"Description Read access to a user's library. Visible to users Access your saved content. <p>Endpoints that require the <code>user-library-read</code> scope</p> <ul> <li>Check User's Saved Albums</li> <li>Check User's Saved Tracks</li> <li>Get Current User's Saved Albums</li> <li>Get a User's Saved Tracks</li> <li>Check User's Saved Episodes</li> <li>Get User's Saved Episodes</li> </ul>"},{"location":"concepts/Scopes/#user-read-email","title":"<code>user-read-email</code>","text":"Description Read access to user\u2019s email address. Visible to users Get your real email address. <p>Endpoints that require the <code>user-read-email</code> scope</p> <ul> <li>Get Current User's Profile</li> </ul>"},{"location":"concepts/Scopes/#user-read-private","title":"<code>user-read-private</code>","text":"Description Read access to user\u2019s subscription details (type of user account). Visible to users Access your subscription details. <p>Endpoints that require the <code>user-read-private</code> scope</p> <ul> <li>Search for an Item</li> <li>Get Current User's Profile</li> </ul>"},{"location":"concepts/Scopes/#user-soa-link","title":"<code>user-soa-link</code>","text":"Description Link a partner user account to a Spotify user account <p>Endpoints that require the <code>user-soa-link</code> scope</p> <ul> <li>Register new user</li> </ul>"},{"location":"concepts/Scopes/#user-soa-unlink","title":"<code>user-soa-unlink</code>","text":"Description Unlink a partner user account from a Spotify account <p>Endpoints that require the <code>user-soa-unlink</code> scope</p> <ul> <li>Unlink user</li> </ul>"},{"location":"concepts/Scopes/#soa-manage-entitlements","title":"<code>soa-manage-entitlements</code>","text":"Description Modify entitlements for linked users <p>Endpoints that require the <code>soa-manage-entitlements</code> scope</p> <ul> <li>Add user entitlements</li> <li>Get user entitlements</li> <li>Removes user entitlements</li> <li>Replace user entitlements</li> </ul>"},{"location":"concepts/Scopes/#soa-manage-partner","title":"<code>soa-manage-partner</code>","text":"Description Update partner information <p>Endpoints that require the <code>soa-manage-partner</code> scope</p> <ul> <li>Set partner logo</li> </ul>"},{"location":"concepts/Scopes/#soa-create-partner","title":"<code>soa-create-partner</code>","text":"Description Create new partners, platform partners only <p>Endpoints that require the <code>soa-create-partner</code> scope</p> <ul> <li>Create new partner</li> </ul>"},{"location":"concepts/Spotify-URIs-and-IDs/","title":"Spotify URIs and IDs","text":"<p>In requests to the Web API and responses from it, you will frequently encounter the following parameters:</p> Spotify URI The resource identifier of, for example, an artist, album or track. This can be entered in the search box in a Spotify Desktop Client, to navigate to that resource. To find a Spotify URI, right-click (on Windows) or Ctrl-Click (on a Mac) on the artist, album or track name.  Example: <code>spotify:track:6rqhFgbbKwnb9MLmUQDhG6</code> Spotify ID The base-62 identifier found at the end of the Spotify URI (see above) for an artist, track, album, playlist, etc. Unlike a Spotify URI, a Spotify ID does not clearly identify the type of resource; that information is provided elsewhere in the call.  Example: <code>6rqhFgbbKwnb9MLmUQDhG6</code> Spotify category ID The unique string identifying the Spotify category.  Example: <code>party</code> Spotify user ID The unique string identifying the Spotify user that you can find at the end of the Spotify URI for the user. The ID of the current user can be obtained via the Get Current User's Profile endpoint.  Example: <code>wizzler</code> Spotify URL When visited, if the user has the Spotify client installed, it will launch the Client and navigate to the requested resource. Which client is determined by the user's device and account settings at play.spotify.com.  Example: <code>http://open.spotify.com/track/6rqhFgbbKwnb9MLmUQDhG6</code>"},{"location":"concepts/Track-Relinking/","title":"Track Relinking","text":"<p>The availability of a track depends on the country registered in the user\u2019s Spotify profile settings. Often Spotify has several instances of a track in its catalogue, each available in a different set of markets. This commonly happens when the track the album is on has been released multiple times under different licenses in different markets.</p> <p>These tracks are linked together so that when a user tries to play a track that isn\u2019t available in their own market, the Spotify mobile, desktop, and web players try to play another instance of the track that is available in the user\u2019s market.</p> <p></p>"},{"location":"concepts/Track-Relinking/#track-relinking-in-the-web-api","title":"Track Relinking in the Web API","text":"<p>If your application supplies a <code>market</code> parameter in its call to the following track endpoints, the Web API will attempt to return information about alternative tracks that are available in the specified market:</p> <ul> <li>Get a Track</li> <li>Get Several Tracks</li> <li>Get an Album</li> <li>Get Several Albums</li> <li>Get an Album\u2019s Tracks</li> <li>Get a Playlist\u2019s Tracks</li> <li>Get a User\u2019s Saved Tracks</li> </ul> <p>When using the <code>market</code> query parameter, the response will contain another instance of the tracks only if the original track is unavailable and other instances of the track are available.</p> <p>For example, the track \u201cHeaven and Hell\u201d by William Onyeabor is not available in the United States (market code US), as shown by the request to retrieve the track\u2019s metadata:</p> <pre><code>curl -X GET \"https://api.spotify.com/v1/tracks/6kLCHFM39wkFjOuyPGLGeQ\"`\n</code></pre> <pre><code>{\n  ...\n  available_markets: [ \"AT\", \"AU\", \"BE\", \"DK\", \"ES\", \"FI\",\n                       \"FR\", \"HU\", \"IT\", \"PL\", \"PT\", \"SE\",\n                       \"SK\", \"TR\", \"TW\" ],\n  ...\n  uri: \"spotify:track:6kLCHFM39wkFjOuyPGLGeQ\"\n}\n</code></pre> <p>If a <code>market</code> query parameter specifying the US market is appended to the call, the Web API recognizes that the specified track is unplayable and instead returns information about a track that is playable in the specified market. In addition it returns information about the original track:</p> <pre><code>curl -X GET \"https://api.spotify.com/v1/tracks/6kLCHFM39wkFjOuyPGLGeQ?market=US\"`\n</code></pre> <pre><code>{\n    ...\n    is_playable: true\n    linked_from: {\n        external_urls: {\n            spotify: \"https://open.spotify.com/track/6kLCHFM39wkFjOuyPGLGeQ\"\n        },\n        href: \"https://api.spotify.com/v1/tracks/6kLCHFM39wkFjOuyPGLGeQ\",\n        id: \"6kLCHFM39wkFjOuyPGLGeQ\",\n        type: \"track\",\n        uri: \"spotify:track:6kLCHFM39wkFjOuyPGLGeQ\"\n    },\n    ...\n    uri: \"spotify:track:6ozxplTAjWO0BlUxN8ia0A\"\n}\n</code></pre> <p>There are a number of important differences between the response you get with and without the <code>market</code> query parameter.</p> <p>When the <code>market</code> parameter is supplied:</p> <ul> <li>The <code>available_markets</code> property in the Track object is replaced by the <code>is_playable</code> property. (Since the request contains the <code>market</code> query parameter, there\u2019s no need for the <code>available_markets</code> property to determine if the user can play the track or not.)</li> <li>If the track has been relinked, the response contains a <code>linked_from</code> object containing information about the original track. In the example above, the track that was requested had the Spotify URI <code>spotify:track:6kLCHFM39wkFjOuyPGLGeQ</code>. Since it\u2019s been relinked, this original track URI can be found in the <code>linked_from</code> object. The parent track object now contains metadata about the relinked track with URI <code>spotify:track:6ozxplTAjWO0BlUxN8ia0A</code>.</li> <li>If the <code>is_playable</code> property is <code>false</code>, the original track is not available in the given market, and Spotify did not have any tracks to relink it with. The track response will still contain metadata for the original track, and a <code>restrictions</code> object containing the reason why the track is not available: <code>\"restrictions\" : {\"reason\" : \"market\"}</code>.</li> <li>If the <code>is_playable</code> property is <code>true</code>, the <code>linked_from</code> object may or may not exist depending on whether the original track was available in the market. If the <code>linked_from</code> object exists, the original track has been relinked.</li> </ul> <p>Info</p> <p>IMPORTANT: If you plan to do further operations on tracks (for example, removing the track from a playlist or saving it to \u201cYour Music\u201d), it is important that you operate on the original track id found in the <code>linked_from</code> object. Using the ID of the linked track returned at the root level will likely return an error or other unexpected result.</p> <p>Valid <code>market</code> query parameter values are ISO 3166-1 alpha-2 codes, as well as <code>from_token</code>. If <code>from_token</code> is used, an access token tied to a user must be supplied; <code>from_token</code> is the same thing as setting the market parameter to the user\u2019s country.</p>"},{"location":"how-tos/display/","title":"Display your Spotify profile data in a web app","text":"<p>This guide creates a simple client-side application that uses the Spotify Web API to get user profile data. We'll show both TypeScript and JavaScript code snippets, make sure to use the code that is correct for your application.</p> <p>External applications can use the Spotify Web API to retrieve Spotify content, such as song data, album data and playlists. However, in order to access user-related data with the Spotify Web API, an application must be authorized by the user to access that particular information.</p> <p></p>"},{"location":"how-tos/display/#prerequisites","title":"Prerequisites","text":"<p>To work through this guide you'll need:</p> <ul> <li>A Node.js LTS environment or later.</li> <li>npm version 7 or later</li> <li>A Spotify account</li> </ul> <p></p>"},{"location":"how-tos/display/#set-up-your-account","title":"Set up your account","text":"<p>Login to the Spotify Developer Dashboard. If necessary, accept the latest Developer Terms of Service to complete your account set up.</p> <p></p>"},{"location":"how-tos/display/#creating-a-spotify-app","title":"Creating a Spotify app","text":"<p>We will need to register a new app to generate valid credentials - we'll use these credentials later to perform API calls. Follow the apps guide to learn how to create an app and generate the necessary credentials.</p> <p>Once you've created your app, make a note of your <code>client_id</code>.</p> <p></p>"},{"location":"how-tos/display/#creating-a-new-project","title":"Creating a new project","text":"<p>This app uses Vite as a development server. We'll scaffold a new project with the Vite <code>create</code> command and use their default template to give us a basic app:</p> TypeScriptJavaScript <pre><code>npm create vite@latest spotify-profile-demo -- --template vanilla-ts\n</code></pre> <pre><code>npm create vite@latest spotify-profile-demo -- --template vanilla\n</code></pre> <p>Select <code>y</code> when it prompts you to install Vite.</p> <p>Change directory to the new app directory that Vite just created and start the development server:</p> <pre><code>cd spotify-profile-demo\nnpm install\nnpm run dev\n</code></pre> <p>The default Vite template creates some files that we won't need for this demo, so you can delete all of the files in <code>./src/</code> and <code>./public/</code></p> <p></p>"},{"location":"how-tos/display/#creating-the-user-interface","title":"Creating the user interface","text":"<p>This demo is going to be a single page application that runs entirely in the browser. We're going to replace the provided <code>index.html</code> file with a simple HTML page that constitutes the user interface to display the user's profile data.</p> <p>Start by deleting the content of the <code>index.html</code> file and replacing it with a <code>html</code> and <code>head</code> tag that references a TypeScript/JavaScript file (<code>src/script.ts</code>, or <code>src/script.js</code>, we'll create this file later).</p> TypeScriptJavaScript <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;title&gt;My Spotify Profile&lt;/title&gt;\n        &lt;script src=\"src/script.ts\" type=\"module\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n\n&lt;!-- Note- We're referring directly to the TypeScript file,\nand we're using the `type=\"module\"` attribute.\nVite will transpile our TypeScript to JavaScript\nso that it can run in the browser. --&gt;\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;title&gt;My Spotify Profile&lt;/title&gt;\n        &lt;script src=\"src/script.js\" type=\"module\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Inside the body, we'll add some markup to display the profile data:</p> <pre><code>&lt;h1&gt;Display your Spotify profile data&lt;/h1&gt;\n\n&lt;section id=\"profile\"&gt;\n    &lt;h2&gt;Logged in as &lt;span id=\"displayName\"&gt;&lt;/span&gt;&lt;/h2&gt;\n    &lt;span id=\"avatar\"&gt;&lt;/span&gt;\n    &lt;ul&gt;\n        &lt;li&gt;User ID: &lt;span id=\"id\"&gt;&lt;/span&gt;&lt;/li&gt;\n        &lt;li&gt;Email: &lt;span id=\"email\"&gt;&lt;/span&gt;&lt;/li&gt;\n        &lt;li&gt;Spotify URI: &lt;a id=\"uri\" href=\"#\"&gt;&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;Link: &lt;a id=\"url\" href=\"#\"&gt;&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;Profile Image: &lt;span id=\"imgUrl\"&gt;&lt;/span&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/section&gt;\n</code></pre> <p>Some elements in this block have <code>id</code> attributes. We'll use these to replace the element's text with the data we fetch from the Web API.</p> <p></p>"},{"location":"how-tos/display/#calling-the-web-api","title":"Calling the Web API","text":"<p>We're going to use the Web API to get the user's profile data. We'll use the authorization code flow with PKCE to get an access token, and then use that token to call the API.</p> <p></p>"},{"location":"how-tos/display/#how-it-works","title":"How it works","text":"<ul> <li>When the page loads, we'll check if there is a code in the callback query string</li> <li>If we don't have a code, we'll redirect the user to the Spotify authorization page.</li> <li>Once the user authorizes the application, Spotify will redirect the user back to our application, and we'll read the code from the query string.</li> <li>We will use the code to request an access token from the Spotify token API</li> <li>We'll use the access token to call the Web API to get the user's profile data.</li> <li>We'll populate the user interface with the user's profile data.</li> </ul> <p>Create a <code>src/script.ts</code> or <code>src/script.js</code> file and add the following code:</p> TypeScriptJavaScript <pre><code>const clientId = \"your-client-id-here\"; // Replace with your client id\nconst code = undefined;\n\nif (!code) {\n    redirectToAuthCodeFlow(clientId);\n} else {\n    const accessToken = await getAccessToken(clientId, code);\n    const profile = await fetchProfile(accessToken);\n    populateUI(profile);\n}\n\nasync function redirectToAuthCodeFlow(clientId: string) {\n    // TODO: Redirect to Spotify authorization page\n}\n\nasync function getAccessToken(clientId: string, code: string) {\n    // TODO: Get access token for code\n}\n\nasync function fetchProfile(token: string): Promise&lt;any&gt; {\n    // TODO: Call Web API\n}\n\nfunction populateUI(profile: any) {\n    // TODO: Update UI with profile data\n}\n</code></pre> <pre><code>const clientId = \"your-client-id-here\"; // Replace with your client ID\nconst code = undefined;\n\nif (!code) {\n    redirectToAuthCodeFlow(clientId);\n} else {\n    const accessToken = await getAccessToken(clientId, code);\n    const profile = await fetchProfile(accessToken);\n    populateUI(profile);\n}\n\nasync function redirectToAuthCodeFlow(clientId) {\n    // TODO: Redirect to Spotify authorization page\n}\n\nasync function getAccessToken(clientId, code) {\n    // TODO: Get access token for code\n}\n\nasync function fetchProfile(token) {\n    // TODO: Call Web API\n}\n\nfunction populateUI(profile) {\n    // TODO: Update UI with profile data\n}\n</code></pre> <p>This is the outline of our application.</p> <p>On the first line there is a <code>clientId</code> variable - you'll need to set this variable to the <code>client_id</code> of the Spotify app you created earlier.</p> <p>The code now needs to be updated to redirect the user to the Spotify authorization page. To do this, let's write the <code>redirectToAuthCodeFlow</code> function:</p> TypeScriptJavaScript <pre><code>export async function redirectToAuthCodeFlow(clientId: string) {\n    const verifier = generateCodeVerifier(128);\n    const challenge = await generateCodeChallenge(verifier);\n\n    localStorage.setItem(\"verifier\", verifier);\n\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"response_type\", \"code\");\n    params.append(\"redirect_uri\", \"http://localhost:5173/callback\");\n    params.append(\"scope\", \"user-read-private user-read-email\");\n    params.append(\"code_challenge_method\", \"S256\");\n    params.append(\"code_challenge\", challenge);\n\n    document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;\n}\n\nfunction generateCodeVerifier(length: number) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    for (let i = 0; i &lt; length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n\nasync function generateCodeChallenge(codeVerifier: string) {\n    const data = new TextEncoder().encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\n    return btoa(String.fromCharCode.apply(null, [...new Uint8Array(digest)]))\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/=+$/, '');\n}\n</code></pre> <pre><code>export async function redirectToAuthCodeFlow(clientId) {\n    const verifier = generateCodeVerifier(128);\n    const challenge = await generateCodeChallenge(verifier);\n\n    localStorage.setItem(\"verifier\", verifier);\n\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"response_type\", \"code\");\n    params.append(\"redirect_uri\", \"http://localhost:5173/callback\");\n    params.append(\"scope\", \"user-read-private user-read-email\");\n    params.append(\"code_challenge_method\", \"S256\");\n    params.append(\"code_challenge\", challenge);\n\n    document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;\n}\n\nfunction generateCodeVerifier(length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    for (let i = 0; i &lt; length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n\nasync function generateCodeChallenge(codeVerifier) {\n    const data = new TextEncoder().encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\n    return btoa(String.fromCharCode.apply(null, [...new Uint8Array(digest)]))\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/=+$/, '');\n}\n</code></pre> <p>In this function, a new URLSearchParams object is created, and we add the <code>client_id</code>, <code>response_type</code>, <code>redirect_uri</code> and <code>scope</code> parameters to it. The scope parameter is a list of permissions that we're requesting from the user. In this case, we're requesting the <code>user-read-private</code> and <code>user-read-email</code> scopes - these are the scopes that allow us to fetch the user's profile data.</p> <p>The <code>redirect_uri</code> parameter is the URL that Spotify will redirect the user back to after they've authorized the application. In this case, we're using a URL that points to our local Vite dev server.</p> <p>You need to make sure this URL is listed in the Redirect URIs section of your Spotify Application Settings in your Developer Dashboard.</p> <p></p> <p>You will also notice that we are generating PKCE verifier and challenge data, we're using this to verify that our request is authentic. We're using local storage to store the verifier data, which works like a password for the token exchange process.</p> <p>To prevent the user from being stuck in a redirect loop when they authenticate, we need to check if the callback contains a <code>code</code> parameter. To do this, the first three lines of code in the file are modified like this:</p> <pre><code>const clientId = 'your_client_id';\nconst params = new URLSearchParams(window.location.search);\nconst code = params.get('code');\n\nif (!code) {\n    redirectToAuthCodeFlow(clientId);\n} else {\n    const accessToken = await getAccessToken(clientId, code);\n    const profile = await fetchProfile(accessToken);\n    populateUI(profile);\n}\n</code></pre> <p>In order to make sure that the token exchange works, we need to write the <code>getAccessToken</code> function.</p> TypeScriptJavaScript <pre><code>export async function getAccessToken(clientId: string, code: string): Promise&lt;string&gt; {\n    const verifier = localStorage.getItem(\"verifier\");\n\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"grant_type\", \"authorization_code\");\n    params.append(\"code\", code);\n    params.append(\"redirect_uri\", \"http://localhost:5173/callback\");\n    params.append(\"code_verifier\", verifier!);\n\n    const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n        body: params\n    });\n\n    const { access_token } = await result.json();\n    return access_token;\n}\n</code></pre> <pre><code>export async function getAccessToken(clientId, code) {\n    const verifier = localStorage.getItem(\"verifier\");\n\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"grant_type\", \"authorization_code\");\n    params.append(\"code\", code);\n    params.append(\"redirect_uri\", \"http://localhost:5173/callback\");\n    params.append(\"code_verifier\", verifier);\n\n    const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n        body: params\n    });\n\n    const { access_token } = await result.json();\n    return access_token;\n}\n</code></pre> <p>In this function, we load the verifier from local storage and using both the code returned from the callback and the verifier to perform a <code>POST</code> to the Spotify token API. The API uses these two values to verify our request and it returns an access token.</p> <p>Now, if we run <code>npm run dev</code>, and navigate to <code>http://localhost:5173</code> in a browser, we'll be redirected to the Spotify authorization page. If we authorize the application, we'll be redirected back to our application, but no data will be fetched and displayed.</p> <p>To fix this, we need to update the <code>fetchProfile</code> function to call the Web API and get the profile data. Update the <code>fetchProfile</code> function:</p> TypeScriptJavaScript <pre><code>async function fetchProfile(token: string): Promise&lt;any&gt; {\n    const result = await fetch(\"https://api.spotify.com/v1/me\", {\n        method: \"GET\", headers: { Authorization: `Bearer ${token}` }\n    });\n\n    return await result.json();\n}\n</code></pre> <pre><code>async function fetchProfile(token) {\n    const result = await fetch(\"https://api.spotify.com/v1/me\", {\n        method: \"GET\", headers: { Authorization: `Bearer ${token}` }\n    });\n\n    return await result.json();\n}\n</code></pre> <p>In this function, a call is made to <code>https://api.spotify.com/v1/me</code> using the browser's Fetch API to get the profile data. The <code>Authorization</code> header is set to <code>Bearer ${token}</code>, where token is the access token that we got from the <code>https://accounts.spotify.com/api/token</code> endpoint.</p> <p>If we add a <code>console.log</code> statement to the calling code we can see the profile data that is returned from the API in the browser's console:</p> <pre><code>} else {\n    const profile = await fetchProfile(token);\n    console.log(profile); // Profile data logs to console\n    ...\n}\n</code></pre> <p>Finally, we need to update the <code>populateUI</code> function to display the profile data in the UI. To do this, we'll use the DOM to find our HTML elements and update them with the profile data:</p> TypeScriptJavaScript <pre><code>function populateUI(profile: any) {\n    document.getElementById(\"displayName\")!.innerText = profile.display_name;\n    if (profile.images[0]) {\n        const profileImage = new Image(200, 200);\n        profileImage.src = profile.images[0].url;\n        document.getElementById(\"avatar\")!.appendChild(profileImage);\n    }\n    document.getElementById(\"id\")!.innerText = profile.id;\n    document.getElementById(\"email\")!.innerText = profile.email;\n    document.getElementById(\"uri\")!.innerText = profile.uri;\n    document.getElementById(\"uri\")!.setAttribute(\"href\", profile.external_urls.spotify);\n    document.getElementById(\"url\")!.innerText = profile.href;\n    document.getElementById(\"url\")!.setAttribute(\"href\", profile.href);\n    document.getElementById(\"imgUrl\")!.innerText = profile.images[0]?.url ?? '(no profile image)';\n}\n</code></pre> <pre><code>function populateUI(profile) {\n    document.getElementById(\"displayName\").innerText = profile.display_name;\n    if (profile.images[0]) {\n        const profileImage = new Image(200, 200);\n        profileImage.src = profile.images[0].url;\n        document.getElementById(\"avatar\").appendChild(profileImage);\n        document.getElementById(\"imgUrl\").innerText = profile.images[0].url;\n    }\n    document.getElementById(\"id\").innerText = profile.id;\n    document.getElementById(\"email\").innerText = profile.email;\n    document.getElementById(\"uri\").innerText = profile.uri;\n    document.getElementById(\"uri\").setAttribute(\"href\", profile.external_urls.spotify);\n    document.getElementById(\"url\").innerText = profile.href;\n    document.getElementById(\"url\").setAttribute(\"href\", profile.href);\n}\n</code></pre> <p>You can now run your code by running <code>npm run dev</code> in the terminal and navigating to <code>http://localhost:5173</code> in your browser.</p> <p></p> <p></p>"},{"location":"how-tos/display/#adding-extra-type-safety-for-typescript-developers","title":"Adding extra type safety for TypeScript developers","text":"<p>At the moment, even though we're using TypeScript, we don't have any type safety around the data being returned from the Web API. To improve this, we can create a <code>UserProfile</code> interface to describes the data that we expect to be returned from the API. Adding an interface will define the shape of the object that we're expecting, this will make using the data type-safe and will allow for type prompts while coding, making a more pleasant developer experience if you extend this project in future.</p> <p>To do this, create a new file called <code>types.d.ts</code> in the <code>src</code> folder and add the following code:</p> <pre><code>interface UserProfile {\n    country: string;\n    display_name: string;\n    email: string;\n    explicit_content: {\n        filter_enabled: boolean;\n        filter_locked: boolean;\n    };\n    external_urls: { spotify: string };\n    followers: { href: string; total: number };\n    href: string;\n    id: string;\n    images: Image[];\n    product: string;\n    type: string;\n    uri: string;\n}\n\ninterface Image {\n    url: string;\n    height: number;\n    width: number;\n}\n</code></pre> <p>We can now update our calling code to expect these types:</p> <pre><code>async function fetchProfile(token: string): Promise&lt;UserProfile&gt; {\n    // ...\n}\n\nfunction populateUI(profile: UserProfile) {\n    // ...\n}\n</code></pre> <p>You can view and fork the final code for this demo on GitHub: Get User Profile Repository.</p>"},{"location":"tutorials/Authorization-code-PKCE/","title":"Authorization Code with PKCE","text":"<p>The authorization code flow with PKCE is the recommended authorization flow if you\u2019re implementing authorization in a mobile app, single page web apps, or any other type of application where the client secret can\u2019t be safely stored.</p> <p>The implementation of the PKCE extension consists of the following steps:</p> <ul> <li>Code Challenge generation from a Code Verifier.</li> <li>Request authorization from the user and retrieve the authorization code.</li> <li>Request an access token from the authorization code.</li> <li>Finally, use the access token to make API calls.</li> </ul> <p></p>"},{"location":"tutorials/Authorization-code-PKCE/#pre-requisites","title":"Pre-requisites","text":"<p>This guide assumes that:</p> <ul> <li>You have read the authorization guide.</li> <li>You have created an app following the apps guide.</li> </ul> <p></p>"},{"location":"tutorials/Authorization-code-PKCE/#example","title":"Example","text":"<p>You can find an example app implementing Authorization Code flow with PKCE extension on GitHub in the web-api-examples repository.</p> <p></p>"},{"location":"tutorials/Authorization-code-PKCE/#code-verifier","title":"Code Verifier","text":"<p>The PKCE authorization flow starts with the creation of a code verifier. According to the PKCE standard, a code verifier is a high-entropy cryptographic random string with a length between 43 and 128 characters (the longer the better). It can contain letters, digits, underscores, periods, hyphens, or tildes.</p> <p>The code verifier could be implemented using the following JavaScript function:</p> <pre><code>const generateRandomString = (length) =&gt; {\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const values = crypto.getRandomValues(new Uint8Array(length));\n    return values.reduce((acc, x) =&gt; acc + possible[x % possible.length], '');\n};\n\nconst codeVerifier = generateRandomString(64);\n</code></pre> <p></p>"},{"location":"tutorials/Authorization-code-PKCE/#code-challenge","title":"Code Challenge","text":"<p>Once the code verifier has been generated, we must transform (hash) it using the SHA256 algorithm. This is the value that will be sent within the user authorization request.</p> <p>Let's use window.crypto.subtle.digest to generate the value using the SHA256 algorithm from the given data:</p> <pre><code>const sha256 = async (plain) =&gt; {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(plain);\n    return window.crypto.subtle.digest('SHA-256', data);\n};\n</code></pre> <p>Next, we will implement a function <code>base64encode</code> that returns the <code>base64</code> representation of the digest we just calculated with the <code>sha256</code> function:</p> <pre><code>const base64encode = (input) =&gt; {\n    return btoa(String.fromCharCode(...new Uint8Array(input)))\n        .replace(/=/g, '')\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_');\n};\n</code></pre> <p>Let's put all the pieces together to implement the code challenge generation:</p> <pre><code>const hashed = await sha256(codeVerifier);\nconst codeChallenge = base64encode(hashed);\n</code></pre> <p></p>"},{"location":"tutorials/Authorization-code-PKCE/#request-user-authorization","title":"Request User Authorization","text":"<p>To request authorization from the user, a <code>GET</code> request must be made to the <code>/authorize</code> endpoint. This request should include the same parameters as the authorization code flow, along with two additional parameters: <code>code_challenge</code> and <code>code_challenge_method</code>:</p> Query Parameter Relevance Value client_id Required The Client ID generated after registering your application. response_type Required Set to <code>code</code>. redirect_uri Required The URI to redirect to after the user grants or denies permission. This URI needs to have been entered in the Redirect URI allowlist that you specified when you registered your application (See the app guide). The value of <code>redirect_uri</code> here must exactly match one of the values you entered when you registered your application, including upper or lowercase, terminating slashes, and such. state Optional, but strongly recommended This provides protection against attacks such as cross-site request forgery. See RFC-6749. scope Optional A space-separated list of scopes. If no scopes are specified, authorization will be granted only to access publicly available information: that is, only information normally visible in the Spotify desktop, web, and mobile players. code_challenge_method Required Set to <code>S256</code>. code_challenge Required Set to the code challenge that your app calculated in the previous step. <p>The code for requesting user authorization looks as follows:</p> <pre><code>const clientId = 'YOUR_CLIENT_ID';\nconst redirectUri = 'http://localhost:8080';\n\nconst scope = 'user-read-private user-read-email';\nconst authUrl = new URL('https://accounts.spotify.com/authorize');\n\n// generated in the previous step\nwindow.localStorage.setItem('code_verifier', codeVerifier);\n\nconst params = {\n    response_type: 'code',\n    client_id: clientId,\n    scope,\n    code_challenge_method: 'S256',\n    code_challenge: codeChallenge,\n    redirect_uri: redirectUri,\n};\n\nauthUrl.search = new URLSearchParams(params).toString();\nwindow.location.href = authUrl.toString();\n</code></pre> <p>The app generates a PKCE code challenge and redirects to the Spotify authorization server login page by updating the <code>window.location</code> object value. This allows the user to grant permissions to our application</p> <p>Please note that the code verifier value is stored locally using the <code>localStorage</code> JavaScript property for use in the next step of the authorization flow.</p> <p></p>"},{"location":"tutorials/Authorization-code-PKCE/#response","title":"Response","text":"<p>If the user accepts the requested permissions, the OAuth service redirects the user back to the URL specified in the <code>redirect_uri</code> field. This callback contains two query parameters within the URL:</p> Query Parameter Value code An authorization code that can be exchanged for an access token. state The value of the state parameter supplied in the request. <p>We must then parse the URL to retrieve the code parameter:</p> <pre><code>const urlParams = new URLSearchParams(window.location.search);\nlet code = urlParams.get('code');\n</code></pre> <p>The code will be necessary to request the access token in the next step.</p> <p>If the user does not accept your request or if an error has occurred, the response query string contains the following parameters:</p> Query Parameter Value error The reason authorization failed, for example: \"access_denied\" state The value of the state parameter supplied in the request. <p></p>"},{"location":"tutorials/Authorization-code-PKCE/#request-an-access-token","title":"Request an access token","text":"<p>After the user accepts the authorization request of the previous step, we can exchange the authorization code for an access token. We must send a <code>POST</code> request to the <code>/api/token</code> endpoint with the following parameters:</p> Body Parameters Relevance Value grant_type Required This field must contain the value <code>authorization_code</code>. code Required The authorization code returned from the previous request. redirect_uri Required This parameter is used for validation only (there is no actual redirection). The value of this parameter must exactly match the value of <code>redirect_uri</code> supplied when requesting the authorization code. client_id Required The client ID for your app, available from the developer dashboard. code_verifier Required The value of this parameter must match the value of the <code>code_verifier</code> that your app generated in the previous step. <p>The request must include the following HTTP header:</p> Header Parameter Relevance Value Content-Type Required Set to <code>application/x-www-form-urlencoded</code>. <p>The request of the token could be implemented with the following JavaScript function:</p> <pre><code>const getToken = async (code) =&gt; {\n    // stored in the previous step\n    let codeVerifier = localStorage.getItem('code_verifier');\n\n    const payload = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n            client_id: clientId,\n            grant_type: 'authorization_code',\n            code,\n            redirect_uri: redirectUri,\n            code_verifier: codeVerifier,\n        }),\n    };\n\n    const body = await fetch(url, payload);\n    const response = await body.json();\n\n    localStorage.setItem('access_token', response.access_token);\n};\n</code></pre> <p></p>"},{"location":"tutorials/Authorization-code-PKCE/#response_1","title":"Response","text":"<p>On success, the response will have a <code>200 OK</code> status and the following JSON data in the response body:</p> key Type Description access_token string An access token that can be provided in subsequent calls, for example to Spotify Web API services. token_type string How the access token may be used: always \"Bearer\". scope string A space-separated list of scopes which have been granted for this <code>access_token</code> expires_in int The time period (in seconds) for which the access token is valid. refresh_token string See refreshing tokens. <p></p>"},{"location":"tutorials/Authorization-code-PKCE/#whats-next","title":"What's next?","text":"<ul> <li> <p>Great! We have the access token. Now you might be wondering: what do I do with it? Take a look at to the access token guide to learn how to make an API call using your new fresh access token.</p> </li> <li> <p>If your access token has expired, you can learn how to issue a new one without requiring users to reauthorize your application by reading the refresh token guide.</p> </li> </ul>"},{"location":"tutorials/Authorization-code/","title":"Authorization Code","text":"<p>The authorization code flow is suitable for long-running applications (e.g. web and mobile apps) where the user grants permission only once.</p> <p>If you\u2019re using the authorization code flow in a mobile app, or any other type of application where the client secret can't be safely stored, then you should use the PKCE extension. Keep reading to learn how to correctly implement it.</p> <p>The following diagram shows how the authorization code flow works:</p> <p></p> <p></p>"},{"location":"tutorials/Authorization-code/#pre-requisites","title":"Pre-requisites","text":"<p>This guide assumes that:</p> <ul> <li>You have read the authorization guide.</li> <li>You have created an app following the apps guide.</li> </ul> <p></p>"},{"location":"tutorials/Authorization-code/#example","title":"Example","text":"<p>You can find an example app implementing Authorization Code flow on GitHub in the web-api-examples repository.</p> <p></p>"},{"location":"tutorials/Authorization-code/#request-user-authorization","title":"Request User Authorization","text":"<p>The first step is to request authorization from the user so that our app can access to the Spotify resources on the user's behalf. To do this, our application must build and send a <code>GET</code> request to the <code>/authorize</code> endpoint with the following parameters:</p> Query Parameter Relevance Value client_id Required The Client ID generated after registering your application. response_type Required Set to code. redirect_uri Required The URI to redirect to after the user grants or denies permission. This URI needs to have been entered in the Redirect URI allowlist that you specified when you registered your application (See the app guide). The value of <code>redirect_uri</code> here must exactly match one of the values you entered when you registered your application, including upper or lowercase, terminating slashes, and such. state Optional, but strongly recommended This provides protection against attacks such as cross-site request forgery. See RFC-6749. scope Optional A space-separated list of scopes.If no scopes are specified, authorization will be granted only to access publicly available information: that is, only information normally visible in the Spotify desktop, web, and mobile players. show_dialog Optional Whether or not to force the user to approve the app again if they\u2019ve already done so. If <code>false</code> (default), a user who has already approved the application may be automatically redirected to the URI specified by <code>redirect_uri</code>. If <code>true</code>, the user will not be automatically redirected and will have to approve the app again. <p>The following JavaScript code example implements the <code>/login</code> method using Express framework to initiates the authorization request:</p> <pre><code>var client_id = 'CLIENT_ID';\nvar redirect_uri = 'http://localhost:8888/callback';\n\nvar app = express();\n\napp.get('/login', function (req, res) {\n    var state = generateRandomString(16);\n    var scope = 'user-read-private user-read-email';\n\n    res.redirect(\n        'https://accounts.spotify.com/authorize?' +\n            querystring.stringify({\n                response_type: 'code',\n                client_id: client_id,\n                scope: scope,\n                redirect_uri: redirect_uri,\n                state: state,\n            }),\n    );\n});\n</code></pre> <p>Once the request is processed, the user will see the authorization dialog asking to authorize access within the <code>user-read-private</code> and <code>user-read-email</code> scopes.</p> <p>The Spotify OAuth 2.0 service presents details of the scopes for which access is being sought. If the user is not logged in, they are prompted to do so using their Spotify credentials. When the user is logged in, they are asked to authorize access to the data sets or features defined in the scopes.</p> <p>Finally, the user is redirected back to your specified <code>redirect_uri</code>. After the user accepts, or denies your request, the Spotify OAuth 2.0 service redirects the user back to your <code>redirect_uri</code>. In this example, the redirect address is <code>https://localhost:8888/callback</code></p> <p></p>"},{"location":"tutorials/Authorization-code/#response","title":"Response","text":"<p>If the user accepts your request, then the user is redirected back to the application using the <code>redirect_uri</code> passed on the authorized request described above.</p> <p>The callback contains two query parameters:</p> Query Parameter Value code An authorization code that can be exchanged for an access token. state The value of the <code>state</code> parameter supplied in the request. <p>For example:</p> <pre><code>https://my-domain.com/callback?code=NApCCg..BkWtQ&amp;state=34fFs29kd09\n</code></pre> <p>If the user does not accept your request or if an error has occurred, the response query string contains the following parameters:</p> Query Parameter Value error The reason authorization failed, for example: \"access_denied\" state The value of the <code>state</code> parameter supplied in the request. <p>For example:</p> <pre><code>https://my-domain.com/callback?error=access_denied&amp;state=34fFs29kd09\n</code></pre> <p>In both cases, your app should compare the state parameter that it received in the redirection URI with the state parameter it originally provided to Spotify in the authorization URI. If there is a mismatch then your app should reject the request and stop the authentication flow.</p> <p></p>"},{"location":"tutorials/Authorization-code/#request-an-access-token","title":"Request an access token","text":"<p>If the user accepted your request, then your app is ready to exchange the authorization code for an access token. It can do this by sending a <code>POST</code> request to the <code>/api/token</code> endpoint.</p> <p>The body of this <code>POST</code> request must contain the following parameters encoded in <code>application/x-www-form-urlencoded</code>:</p> Body Parameters Relevance Value grant_type Required This field must contain the value \"<code>authorization_code</code>\". code Required The authorization code returned from the previous request. redirect_uri Required This parameter is used for validation only (there is no actual redirection). The value of this parameter must exactly match the value of <code>redirect_uri</code> supplied when requesting the authorization code. <p>The request must include the following HTTP headers:</p> Header Parameter Relevance Value Authorization Required Base 64 encoded string that contains the client ID and client secret key. The field must have the format: <code>Authorization: Basic &lt;base64 encoded client_id:client_secret&gt;</code> Content-Type Required Set to <code>application/x-www-form-urlencoded</code>. <p>This step is usually implemented within the callback described on the request of the previous steps:</p> <pre><code>app.get('/callback', function (req, res) {\n    var code = req.query.code || null;\n    var state = req.query.state || null;\n\n    if (state === null) {\n        res.redirect(\n            '/#' +\n                querystring.stringify({\n                    error: 'state_mismatch',\n                }),\n        );\n    } else {\n        var authOptions = {\n            url: 'https://accounts.spotify.com/api/token',\n            form: {\n                code: code,\n                redirect_uri: redirect_uri,\n                grant_type: 'authorization_code',\n            },\n            headers: {\n                'content-type': 'application/x-www-form-urlencoded',\n                Authorization: 'Basic ' + new Buffer.from(client_id + ':' + client_secret).toString('base64'),\n            },\n            json: true,\n        };\n    }\n});\n</code></pre> <p></p>"},{"location":"tutorials/Authorization-code/#response_1","title":"Response","text":"<p>On success, the response will have a <code>200 OK</code> status and the following JSON data in the response body:</p> key Type Description access_token string An access token that can be provided in subsequent calls, for example to Spotify Web API services. token_type string How the access token may be used: always \"Bearer\". scope string A space-separated list of scopes which have been granted for this <code>access_token</code> expires_in int The time period (in seconds) for which the access token is valid. refresh_token string See refreshing tokens. <p></p>"},{"location":"tutorials/Authorization-code/#whats-next","title":"What's next?","text":"<ul> <li> <p>Congratulations! Your fresh access token is ready to be used! How can we make API calls with it? take a look at to the access token guide to learn how to make an API call using your new fresh access token.</p> </li> <li> <p>If your access token has expired, you can learn how to issue a new one without requiring users to reauthorize your application by reading the refresh token guide.</p> </li> </ul>"},{"location":"tutorials/Client-credentials/","title":"Client Credentials","text":"<p>The Client Credentials flow is used in server-to-server authentication. Since this flow does not include authorization, only endpoints that do not access user information can be accessed.</p> <p>The following diagram shows how the Client Credentials Flow works:</p> <p></p> <p></p>"},{"location":"tutorials/Client-credentials/#pre-requisites","title":"Pre-requisites","text":"<p>This guide assumes that:</p> <ul> <li>You have read the authorization guide.</li> <li>You have created an app following the apps guide.</li> </ul> <p></p>"},{"location":"tutorials/Client-credentials/#source-code","title":"Source Code","text":"<p>You can find an example app implementing Client Credentials flow on GitHub in the web-api-examples repository.</p> <p></p>"},{"location":"tutorials/Client-credentials/#request-authorization","title":"Request authorization","text":"<p>The first step is to send a <code>POST</code> request to the <code>/api/token</code> endpoint of the Spotify OAuth 2.0 Service with the following parameters encoded in <code>application/x-www-form-urlencoded</code>:</p> Body Parameters Relevance Value grant_type Required Set it to client_credentials. <p>The headers of the request must contain the following parameters:</p> Header Parameter Relevance Value Authorization Required Base 64 encoded string that contains the client ID and client secret key. The field must have the format: <code>Authorization: Basic &lt;base64 encoded client_id:client_secret&gt;</code> Content-Type Required Set to <code>application/x-www-form-urlencoded</code>. <p>The following JavaScript creates and sends an authorization request:</p> <pre><code>var client_id = 'CLIENT_ID';\nvar client_secret = 'CLIENT_SECRET';\n\nvar authOptions = {\n    url: 'https://accounts.spotify.com/api/token',\n    headers: {\n        Authorization: 'Basic ' + new Buffer.from(client_id + ':' + client_secret).toString('base64'),\n    },\n    form: {\n        grant_type: 'client_credentials',\n    },\n    json: true,\n};\n\nrequest.post(authOptions, function (error, response, body) {\n    if (!error &amp;&amp; response.statusCode === 200) {\n        var token = body.access_token;\n    }\n});\n</code></pre> <p></p>"},{"location":"tutorials/Client-credentials/#response","title":"Response","text":"<p>If everything goes well, you'll receive a response with a <code>200 OK</code> status and the following JSON data in the response body:</p> key Type Description access_token string An access token that can be provided in subsequent calls, for example to Spotify Web API services. token_type string How the access token may be used: always \"Bearer\". expires_in int The time period (in seconds) for which the access token is valid. <p>For example:</p> <pre><code>{\n    \"access_token\": \"NgCXRKc...MzYjw\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 3600\n}\n</code></pre> <p></p>"},{"location":"tutorials/Client-credentials/#whats-next","title":"What's next?","text":"<p>Learn how to use an access token to fetch data from the Spotify Web API by reading the access token guide.</p>"},{"location":"tutorials/Implicit-grant/","title":"Implicit Grant","text":"<p>Info</p> <p>The implicit grant flow has some significant security flaws, so we strongly advise against using this flow. If you need to implement authorization where storing your client secret is not possible, use Authorization code with PKCE instead.</p> <p>The implicit grant flow is carried out on the client side and it does not involve secret keys. Thus, you do not need any server-side code to use it. Access tokens issued are short-lived with no refresh token to extend them when they expire.</p> <p>The following diagram shows how the Implicit Grant Flow works:</p> <p></p> <p></p>"},{"location":"tutorials/Implicit-grant/#pre-requisites","title":"Pre-requisites","text":"<p>This guide assumes that:</p> <ul> <li>You have read the authorization guide.</li> <li>You have created an app following the apps guide.</li> </ul> <p></p>"},{"location":"tutorials/Implicit-grant/#source-code","title":"Source Code","text":"<p>You can find an example app implementing Implicit Grant flow on GitHub in the web-api-examples repository.</p> <p></p>"},{"location":"tutorials/Implicit-grant/#request-user-authorization","title":"Request User Authorization","text":"<p>Our application must build a <code>GET</code> request to the <code>/authorize</code> endpoint with the following parameters:</p> Query Parameter Relevance Value client_id Required The client ID provided to you by Spotify when you register your application. response_type Required Set it to <code>token</code>. redirect_uri Required The URI to redirect to after the user grants or denies permission. This URI needs to have been entered in the Redirect URI allowlist that you specified when you registered your application (See the app guide). The value of <code>redirect_uri</code> here must exactly match one of the values you entered when you registered your application, including upper or lowercase, terminating slashes, and such. state Optional, but strongly recommended. The state can be useful for correlating requests and responses. Because your <code>redirect_uri</code> can be guessed, using a state value can increase your assurance that an incoming connection is the result of an authentication request. If you generate a random string or encode the hash of some client state (e.g., a cookie) in this state variable, you can validate the response to additionally ensure that the request and response originated in the same browser. This provides protection against attacks such as cross-site request forgery. See RFC-6749. scope Optional A space-separated list of scopes. show_dialog Optional Whether or not to force the user to approve the app again if they\u2019ve already done so. If <code>false</code> (default), a user who has already approved the application may be automatically redirected to the URI specified by <code>redirect_uri</code>. If <code>true</code>, the user will not be automatically redirected and will have to approve the app again. <p>The request is typically sent from the browser.</p> <p>The following JavaScript sample builds the authorization request:</p> <pre><code>var client_id = 'CLIENT_ID';\nvar redirect_uri = 'http://localhost:8888/callback';\n\nvar state = generateRandomString(16);\n\nlocalStorage.setItem(stateKey, state);\nvar scope = 'user-read-private user-read-email';\n\nvar url = 'https://accounts.spotify.com/authorize';\nurl += '?response_type=token';\nurl += '&amp;client_id=' + encodeURIComponent(client_id);\nurl += '&amp;scope=' + encodeURIComponent(scope);\nurl += '&amp;redirect_uri=' + encodeURIComponent(redirect_uri);\nurl += '&amp;state=' + encodeURIComponent(state);\n</code></pre> <p>Once the request is processed, the user will see the authorization dialog asking to authorize access within the scopes.</p> <p>The Spotify Accounts service presents details of the scopes for which access is being sought. If the user is not logged in, they are prompted to do so using their Spotify credentials. When the user is logged in, they are asked to authorize access to the resources or actions defined in the scopes.</p> <p>Finally, the user is redirected back to your specified <code>redirect_uri</code>. After the user accepts, or denies your request, the Spotify OAuth 2.0 server redirects the user back to your <code>redirect_uri</code>. In this example, the redirect address is <code>https://localhost:8888/callback</code></p> <p></p>"},{"location":"tutorials/Implicit-grant/#response","title":"Response","text":"<p>If the user grants access, the final URL will contain a hash fragment with the following data encoded as a query string.</p> Query Parameter Value access_token An access token that can be provided in subsequent calls, for example to Spotify Web API services. token_type Value: \"Bearer\" expires_in The time period (in seconds) for which the access token is valid. state The value of the state parameter supplied in authorization URI. <p>For example:</p> <pre><code>https://example.com/callback#access_token=NwAExz...BV3O2Tk&amp;token_type=Bearer&amp;expires_in=3600&amp;state=123\n</code></pre> <p>If the user denies access, access token is not included and the final URL includes a query string containing the following parameters:</p> Query Parameter Value error The reason authorization failed, for example: \"access_denied\". state The value of the state parameter supplied in the request. <p>For example:</p> <pre><code>https://example.com/callback?error=access_denied&amp;state=123\n</code></pre> <p></p>"},{"location":"tutorials/Implicit-grant/#whats-next","title":"What's next?","text":"<p>Learn how to use an access token to fetch data from the Spotify Web API by reading the access token guide.</p>"},{"location":"tutorials/Refreshing-tokens/","title":"Refreshing tokens","text":"<p>A refresh token is a security credential that allows client applications to obtain new access tokens without requiring users to reauthorize the application.</p> <p>Access tokens are intentionally configured to have a limited lifespan (1 hour), at the end of which, new tokens can be obtained by providing the original refresh token acquired during the authorization token request response:</p> <pre><code>{\n   \"access_token\": \"NgCXRK...MzYjw\",\n   \"token_type\": \"Bearer\",\n   \"scope\": \"user-read-private user-read-email\",\n   \"expires_in\": 3600,\n   \"refresh_token\": \"NgAagA...Um_SHo\"\n}\n</code></pre> <p></p>"},{"location":"tutorials/Refreshing-tokens/#request","title":"Request","text":"<p>To refresh an access token, we must send a <code>POST</code> request with the following parameters:</p> Body Parameter Relevance Value grant_type Required Set it to <code>refresh_token</code>. refresh_token Required The refresh token returned from the authorization token request. client_id Only required for the PKCE extension The client ID for your app, available from the developer dashboard. <p>And the following headers:</p> Header Parameter Relevance Value Content-Type Required Always set to <code>application/x-www-form-urlencoded</code>. Authorization Only required for the Authorization Code Base 64 encoded string that contains the client ID and client secret key. The field must have the format: <code>Authorization: Basic &lt;base64 encoded client_id:client_secret&gt;</code> <p></p>"},{"location":"tutorials/Refreshing-tokens/#example","title":"Example","text":"<p>The following code snippets represent two examples:</p> <ul> <li>A client side (browser) JavaScript function to refresh tokens issued following the Authorization Code with PKCE extension flow.</li> <li>A server side (nodeJS with express) Javascript method to refresh tokens issued under the Authorization Code flow.</li> </ul> browsernodeJS <pre><code>const getRefreshToken = async () =&gt; {\n\n    // refresh token that has been previously stored\n    const refreshToken = localStorage.getItem('refresh_token');\n    const url = \"https://accounts.spotify.com/api/token\";\n\n    const payload = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n            grant_type: 'refresh_token',\n            refresh_token: refreshToken,\n            client_id: clientId\n        }),\n    }\n    const body = await fetch(url, payload);\n    const response = await body.json();\n\n    localStorage.setItem('access_token', response.accessToken);\n    if (response.refreshToken) {\n        localStorage.setItem('refresh_token', response.refreshToken);\n    }\n\n}\n</code></pre> <pre><code>app.get('/refresh_token', function(req, res) {\n\n    var refresh_token = req.query.refresh_token;\n    var authOptions = {\n        url: 'https://accounts.spotify.com/api/token',\n        headers: {\n            'content-type': 'application/x-www-form-urlencoded',\n            'Authorization': 'Basic ' + (new Buffer.from(client_id + ':' + client_secret).toString('base64'))\n        },\n        form: {\n            grant_type: 'refresh_token',\n            refresh_token: refresh_token\n        },\n        json: true\n    };\n\n    request.post(authOptions, function(error, response, body) {\n        if (!error &amp;&amp; response.statusCode === 200) {\n        var access_token = body.access_token,\n            refresh_token = body.refresh_token || refresh_token;\n        res.send({\n            'access_token': access_token,\n            'refresh_token': refresh_token\n        });\n        }\n    });\n});\n</code></pre> <p></p>"},{"location":"tutorials/Refreshing-tokens/#response","title":"Response","text":"<p>If everything goes well, you'll receive a <code>200 OK</code> response which is very similar to the response when issuing an access token:</p> <pre><code>{\n    access_token: 'BQBLuPRYBQ...BP8stIv5xr-Iwaf4l8eg',\n    token_type: 'Bearer',\n    expires_in: 3600,\n    refresh_token: 'AQAQfyEFmJJuCvAFh...cG_m-2KTgNDaDMQqjrOa3',\n    scope: 'user-read-email user-read-private'\n}\n</code></pre> <p>The refresh token contained in the response, can be used to request new tokens. Depending on the grant used to get the initial refresh token, a refresh token might not be included in each response. When a refresh token is not returned, continue using the existing token.</p>"}]}